import Schema from '../schema/Schema';
import Model from '../model/Model';
import ModuleBuilder from '../modules/builder/Builder';
var Database = /** @class */ (function () {
    function Database() {
        /**
         * The list of entities registered to the Vuex Store. It contains models and
         * modules with its name.
         */
        this.entities = [];
        /**
         * The database schema definition. This schema is going to be used when
         * normalizing the data before persisting them to the Vuex Store.
         */
        this.schemas = {};
    }
    /**
     * Initialize the database before a user can start using it.
     */
    Database.prototype.start = function (store, namespace) {
        this.store = store;
        this.namespace = namespace;
        this.registerModules();
        this.createSchema();
    };
    /**
     * Register a model and a module to Database.
     */
    Database.prototype.register = function (model, module) {
        if (module === void 0) { module = {}; }
        this.checkModelTypeMappingCapability(model);
        this.entities.push({
            name: model.entity,
            base: model.baseEntity || model.entity,
            model: model,
            module: module
        });
    };
    /**
     * Get the model of the given name from the entities list.
     */
    Database.prototype.model = function (name) {
        return this.models()[name];
    };
    /**
     * Get the base model of the given name from the entities list.
     */
    Database.prototype.baseModel = function (name) {
        return this.baseModels()[name];
    };
    /**
     * Get all models from the entities list.
     */
    Database.prototype.models = function () {
        return this.entities.reduce(function (models, entity) {
            models[entity.name] = entity.model;
            return models;
        }, {});
    };
    /**
     * Get all base models from the entities list.
     */
    Database.prototype.baseModels = function () {
        var _this = this;
        return this.entities.reduce(function (models, entity) {
            models[entity.name] = _this.model(entity.base);
            return models;
        }, {});
    };
    /**
     * Get the module of the given name from the entities list.
     */
    Database.prototype.module = function (name) {
        return this.modules()[name];
    };
    /**
     * Get all modules from the entities list.
     */
    Database.prototype.modules = function () {
        return this.entities.reduce(function (modules, entity) {
            modules[entity.name] = entity.module;
            return modules;
        }, {});
    };
    /**
     * Create the Vuex Module from the registered entities.
     */
    Database.prototype.registerModules = function () {
        var modules = ModuleBuilder.create(this.namespace, this.models(), this.modules());
        this.store.registerModule(this.namespace, modules);
    };
    /**
     * Create the schema definition from registered entities list and set it to
     * the `schema` property. This schema will be used by the normalizer
     * to normalize data before persisting them to the Vuex Store.
     */
    Database.prototype.createSchema = function () {
        var _this = this;
        this.entities.forEach(function (entity) {
            _this.schemas[entity.name] = Schema.create(entity.model);
        });
    };
    /**
     * Warn user if the given model is a type of an inherited model that is being
     * defined without overwriting `Model.types()` because the user will not be
     * able to use the type mapping feature in this case.
     */
    Database.prototype.checkModelTypeMappingCapability = function (model) {
        // We'll not be logging any warning if it's on a production environment,
        // so let's return here if it is.
        /* istanbul ignore next */
        if (process.env.NODE_ENV === 'production') {
            return;
        }
        // If the model doesn't have `baseEntity` property set, we'll assume it is
        // not an inherited model so we can stop here.
        if (!model.baseEntity) {
            return;
        }
        // Now it seems like the model is indeed an inherited model. Let's check if
        // it has `types()` method declared, or we'll warn the user that it's not
        // possible to use type mapping feature.
        var baseModel = this.model(model.baseEntity);
        if (baseModel && baseModel.types === Model.types) {
            console.warn("Model " + model.name + " extends " + baseModel.name + " which doesn't overwrite Model.types(). You will not be able to use type mapping.");
        }
    };
    return Database;
}());
export default Database;
//# sourceMappingURL=Database.js.map