import * as Vuex from 'vuex';
import Schemas from '../schema/Schemas';
import Model from '../model/Model';
import Entity from './Entity';
import Models from './Models';
import Modules from './Modules';
export default class Database {
    /**
     * The Vuex Store instance.
     */
    store: Vuex.Store<any>;
    /**
     * The namespace of the Vuex Store Module where all entities are
     * registered under.
     */
    namespace: string;
    /**
     * The list of entities registered to the Vuex Store. It contains models and
     * modules with its name.
     */
    entities: Entity[];
    /**
     * The database schema definition. This schema is going to be used when
     * normalizing the data before persisting them to the Vuex Store.
     */
    schemas: Schemas;
    /**
     * Initialize the database before a user can start using it.
     */
    start(store: Vuex.Store<any>, namespace: string): void;
    /**
     * Register a model and a module to Database.
     */
    register(model: typeof Model, module?: Vuex.Module<any, any>): void;
    /**
     * Get the model of the given name from the entities list.
     */
    model(name: string): typeof Model;
    /**
     * Get the base model of the given name from the entities list.
     */
    baseModel(name: string): typeof Model;
    /**
     * Get all models from the entities list.
     */
    models(): Models;
    /**
     * Get all base models from the entities list.
     */
    baseModels(): Models;
    /**
     * Get the module of the given name from the entities list.
     */
    module(name: string): Vuex.Module<any, any>;
    /**
     * Get all modules from the entities list.
     */
    modules(): Modules;
    /**
     * Create the Vuex Module from the registered entities.
     */
    private registerModules;
    /**
     * Create the schema definition from registered entities list and set it to
     * the `schema` property. This schema will be used by the normalizer
     * to normalize data before persisting them to the Vuex Store.
     */
    private createSchema;
    /**
     * Warn user if the given model is a type of an inherited model that is being
     * defined without overwriting `Model.types()` because the user will not be
     * able to use the type mapping feature in this case.
     */
    private checkModelTypeMappingCapability;
}
