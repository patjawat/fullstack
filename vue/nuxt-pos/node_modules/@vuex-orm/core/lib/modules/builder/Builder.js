import { __assign } from "tslib";
import Getters from '../Getters';
import RootGetters from '../RootGetters';
import Actions from '../Actions';
import RootActions from '../RootActions';
import RootMutations from '../RootMutations';
var Builder = /** @class */ (function () {
    function Builder() {
    }
    /**
     * Create module from the given modules.
     */
    Builder.create = function (namespace, models, modules) {
        var tree = {
            namespaced: true,
            state: { $name: namespace },
            getters: RootGetters,
            actions: RootActions,
            mutations: RootMutations,
            modules: {}
        };
        return this.createModules(tree, namespace, models, modules);
    };
    /**
     * Creates module tree to be registered under top level module
     * from the given entities.
     */
    Builder.createModules = function (tree, namespace, models, modules) {
        var _this = this;
        Object.keys(modules).forEach(function (name) {
            var model = models[name];
            var module = modules[name];
            tree.modules[name] = { namespaced: true };
            tree.modules[name].state = _this.createState(namespace, name, model, module);
            tree.getters[name] = function (_state, getters, _rootState, _rootGetters) { return function () {
                return getters.query(name);
            }; };
            tree.modules[name].getters = __assign(__assign({}, Getters), module.getters);
            tree.modules[name].actions = __assign(__assign({}, Actions), module.actions);
            tree.modules[name].mutations = module.mutations || {};
        });
        return tree;
    };
    /**
     * Get new state to be registered to the modules.
     */
    Builder.createState = function (namespace, name, model, module) {
        var modelState = typeof model.state === 'function' ? model.state() : model.state;
        var moduleState = typeof module.state === 'function' ? module.state() : module.state;
        return __assign(__assign(__assign({}, modelState), moduleState), { $connection: namespace, $name: name, data: {} });
    };
    return Builder;
}());
export default Builder;
//# sourceMappingURL=Builder.js.map