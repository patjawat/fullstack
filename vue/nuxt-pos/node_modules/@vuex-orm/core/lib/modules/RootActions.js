import { __assign, __awaiter, __generator } from "tslib";
function destroy(context, payload) {
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            result = { data: {} };
            context.commit('delete', __assign(__assign({}, payload), { result: result }));
            return [2 /*return*/, result.data];
        });
    });
}
/**
 * Delete all data from the store.
 */
function deleteAll(context, payload) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (payload && payload.entity) {
                context.commit('deleteAll', { entity: payload.entity });
                return [2 /*return*/];
            }
            context.commit('deleteAll');
            return [2 /*return*/];
        });
    });
}
var RootActions = {
    /**
     * Create new data with all fields filled by default values.
     */
    new: function (context, payload) {
        var result = { data: {} };
        context.commit('new', __assign(__assign({}, payload), { result: result }));
        return result.data;
    },
    /**
     * Save given data to the store by replacing all existing records in the
     * store. If you want to save data without replacing existing records,
     * use the `insert` method instead.
     */
    create: function (context, payload) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                result = { data: {} };
                context.commit('create', __assign(__assign({}, payload), { result: result }));
                return [2 /*return*/, result.data];
            });
        });
    },
    /**
     * Insert given data to the state. Unlike `create`, this method will not
     * remove existing data within the state, but it will update the data
     * with the same primary key.
     */
    insert: function (context, payload) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                result = { data: {} };
                context.commit('insert', __assign(__assign({}, payload), { result: result }));
                return [2 /*return*/, result.data];
            });
        });
    },
    /**
     * Update data in the store.
     */
    update: function (context, payload) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                result = { data: {} };
                context.commit('update', __assign(__assign({}, payload), { result: result }));
                return [2 /*return*/, result.data];
            });
        });
    },
    /**
     * Insert or update given data to the state. Unlike `insert`, this method
     * will not replace existing data within the state, but it will update only
     * the submitted data with the same primary key.
     */
    insertOrUpdate: function (context, payload) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                result = { data: {} };
                context.commit('insertOrUpdate', __assign(__assign({}, payload), { result: result }));
                return [2 /*return*/, result.data];
            });
        });
    },
    delete: destroy,
    deleteAll: deleteAll
};
export default RootActions;
//# sourceMappingURL=RootActions.js.map