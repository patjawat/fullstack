"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_client_1 = require("apollo-client");
var apollo_cache_inmemory_1 = require("apollo-cache-inmemory");
var apollo_link_http_1 = require("apollo-link-http");
var context_1 = __importDefault(require("../common/context"));
var transformer_1 = __importDefault(require("./transformer"));
var graphql_tag_1 = __importDefault(require("graphql-tag"));
/**
 * This class takes care of the communication with the graphql endpoint by leveraging the awesome apollo-client lib.
 */
var Apollo = /** @class */ (function () {
    /**
     * @constructor
     */
    function Apollo() {
        var context = context_1.default.getInstance();
        // This allows the test suite to pass a custom link
        if (!context.options.apolloClient && context.options.link) {
            this.httpLink = context.options.link;
        }
        else {
            /* istanbul ignore next */
            this.httpLink = new apollo_link_http_1.HttpLink({
                uri: context.options.url ? context.options.url : "/graphql",
                credentials: context.options.credentials ? context.options.credentials : "same-origin",
                useGETForQueries: Boolean(context.options.useGETForQueries)
            });
        }
        if (context.options.apolloClient) {
            this.apolloClient = (function (context) {
                return context.options.apolloClient;
            })(context);
        }
        else {
            this.apolloClient = new apollo_client_1.ApolloClient({
                link: this.httpLink,
                cache: new apollo_cache_inmemory_1.InMemoryCache(),
                connectToDevTools: context.debugMode
            });
        }
    }
    /**
     * Sends a request to the GraphQL API via apollo
     * @param model
     * @param {any} query The query to send (result from gql())
     * @param {Arguments} variables Optional. The variables to send with the query
     * @param {boolean} mutation Optional. If this is a mutation (true) or a query (false, default)
     * @param {boolean} bypassCache If true the query will be send to the server without using the cache. For queries only
     * @returns {Promise<Data>} The new records
     */
    Apollo.prototype.request = function (model, query, variables, mutation, bypassCache) {
        if (mutation === void 0) { mutation = false; }
        if (bypassCache === void 0) { bypassCache = false; }
        return __awaiter(this, void 0, void 0, function () {
            var fetchPolicy, context, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fetchPolicy = bypassCache ? "network-only" : "cache-first";
                        context_1.default.getInstance().logger.logQuery(query, variables, fetchPolicy);
                        context = { headers: Apollo.getHeaders() };
                        if (!mutation) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.apolloClient.mutate({ mutation: query, variables: variables, context: context })];
                    case 1:
                        response = _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.apolloClient.query({ query: query, variables: variables, fetchPolicy: fetchPolicy, context: context })];
                    case 3:
                        response = _a.sent();
                        _a.label = 4;
                    case 4: 
                    // Transform incoming data into something useful
                    return [2 /*return*/, transformer_1.default.transformIncomingData(response.data, model, mutation)];
                }
            });
        });
    };
    Apollo.prototype.simpleQuery = function (query, variables, bypassCache, context) {
        if (bypassCache === void 0) { bypassCache = false; }
        return __awaiter(this, void 0, void 0, function () {
            var fetchPolicy;
            return __generator(this, function (_a) {
                fetchPolicy = bypassCache ? "network-only" : "cache-first";
                return [2 /*return*/, this.apolloClient.query({
                        query: graphql_tag_1.default(query),
                        variables: variables,
                        fetchPolicy: fetchPolicy,
                        context: { headers: Apollo.getHeaders() }
                    })];
            });
        });
    };
    Apollo.prototype.simpleMutation = function (query, variables, context) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.apolloClient.mutate({
                        mutation: graphql_tag_1.default(query),
                        variables: variables,
                        context: { headers: Apollo.getHeaders() }
                    })];
            });
        });
    };
    Apollo.getHeaders = function () {
        var context = context_1.default.getInstance();
        var headers = context.options.headers ? context.options.headers : {};
        if (typeof headers === "function") {
            headers = headers(context);
        }
        return headers;
    };
    return Apollo;
}());
exports.default = Apollo;
//# sourceMappingURL=apollo.js.map