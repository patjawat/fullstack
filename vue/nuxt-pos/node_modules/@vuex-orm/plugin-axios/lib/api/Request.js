import { __assign, __awaiter, __generator } from "tslib";
import Response from './Response';
var Request = /** @class */ (function () {
    /**
     * Create a new api instance.
     */
    function Request(model) {
        /**
         * The default config.
         */
        this.config = {
            save: true
        };
        this.model = model;
        this.registerActions();
    }
    Object.defineProperty(Request.prototype, "axios", {
        /**
         * Get the axios client.
         */
        get: function () {
            if (!this.model.axios) {
                throw new Error('[Vuex ORM Axios] The axios instance is not registered. Please register the axios instance to the model.');
            }
            return this.model.axios;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Register actions from the model config.
     */
    Request.prototype.registerActions = function () {
        var actions = this.model.apiConfig.actions;
        if (!actions) {
            return;
        }
        for (var name_1 in actions) {
            var action = actions[name_1];
            typeof action === 'function'
                ? this.registerFunctionAction(name_1, action)
                : this.registerObjectAction(name_1, action);
        }
    };
    /**
     * Register the given object action.
     */
    Request.prototype.registerObjectAction = function (name, action) {
        var _this = this;
        this[name] = function (config) {
            return _this.request(__assign(__assign({}, action), config));
        };
    };
    /**
     * Register the given function action.
     */
    Request.prototype.registerFunctionAction = function (name, action) {
        this[name] = action.bind(this);
    };
    /**
     * Perform a get request.
     */
    Request.prototype.get = function (url, config) {
        if (config === void 0) { config = {}; }
        return this.request(__assign({ method: 'get', url: url }, config));
    };
    /**
     * Perform a post request.
     */
    Request.prototype.post = function (url, data, config) {
        if (data === void 0) { data = {}; }
        if (config === void 0) { config = {}; }
        return this.request(__assign({ method: 'post', url: url, data: data }, config));
    };
    /**
     * Perform a put request.
     */
    Request.prototype.put = function (url, data, config) {
        if (data === void 0) { data = {}; }
        if (config === void 0) { config = {}; }
        return this.request(__assign({ method: 'put', url: url, data: data }, config));
    };
    /**
     * Perform a patch request.
     */
    Request.prototype.patch = function (url, data, config) {
        if (data === void 0) { data = {}; }
        if (config === void 0) { config = {}; }
        return this.request(__assign({ method: 'patch', url: url, data: data }, config));
    };
    /**
     * Perform a delete request.
     */
    Request.prototype.delete = function (url, config) {
        if (config === void 0) { config = {}; }
        return this.request(__assign({ method: 'delete', url: url }, config));
    };
    /**
     * Perform an api request.
     */
    Request.prototype.request = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var requestConfig, axiosResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestConfig = this.createConfig(config);
                        return [4 /*yield*/, this.axios.request(requestConfig)];
                    case 1:
                        axiosResponse = _a.sent();
                        return [2 /*return*/, this.createResponse(axiosResponse, requestConfig)];
                }
            });
        });
    };
    /**
     * Create a new config by merging the global config, the model config,
     * and the given config.
     */
    Request.prototype.createConfig = function (config) {
        return __assign(__assign(__assign(__assign({}, this.config), this.model.globalApiConfig), this.model.apiConfig), config);
    };
    /**
     * Create a new response instance by applying a few initialization processes.
     * For example, it saves response data if `save` option id set to `true`.
     */
    Request.prototype.createResponse = function (axiosResponse, config) {
        return __awaiter(this, void 0, void 0, function () {
            var response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = new Response(this.model, config, axiosResponse);
                        if (!(config.delete !== undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, response.delete()];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, response];
                    case 2:
                        _a = config.save;
                        if (!_a) return [3 /*break*/, 4];
                        return [4 /*yield*/, response.save()];
                    case 3:
                        _a = (_b.sent());
                        _b.label = 4;
                    case 4:
                        _a;
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return Request;
}());
export default Request;
//# sourceMappingURL=Request.js.map